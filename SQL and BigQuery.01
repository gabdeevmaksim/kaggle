{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":28376,"sourceType":"datasetVersion","datasetId":22090},{"sourceId":285982,"sourceType":"datasetVersion","datasetId":6057}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/getting-started-with-sql-and-bigquery).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"# Introduction\n\nThe first test of your new data exploration skills uses data describing crime in the city of Chicago.\n\nBefore you get started, run the following cell. It sets up the automated feedback system to review your answers.","metadata":{}},{"cell_type":"code","source":"# Set up feedack system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql.ex1 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:41:02.548553Z","iopub.execute_input":"2024-04-10T12:41:02.548971Z","iopub.status.idle":"2024-04-10T12:41:11.246934Z","shell.execute_reply.started":"2024-04-10T12:41:02.548938Z","shell.execute_reply":"2024-04-10T12:41:11.245670Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Using Kaggle's public dataset BigQuery integration.\nSetup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Use the next code cell to fetch the dataset.","metadata":{}},{"cell_type":"code","source":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"chicago_crime\" dataset\ndataset_ref = client.dataset(\"chicago_crime\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:41:11.248650Z","iopub.execute_input":"2024-04-10T12:41:11.249137Z","iopub.status.idle":"2024-04-10T12:41:11.992897Z","shell.execute_reply.started":"2024-04-10T12:41:11.249109Z","shell.execute_reply":"2024-04-10T12:41:11.991658Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Using Kaggle's public dataset BigQuery integration.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Exercises\n\n### 1) Count tables in the dataset\n\nHow many tables are in the Chicago Crime dataset?","metadata":{}},{"cell_type":"code","source":"# Write the code you need here to figure out the ansdwer\nlen(list(client.list_tables(dataset)))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:42:57.985218Z","iopub.execute_input":"2024-04-10T12:42:57.985619Z","iopub.status.idle":"2024-04-10T12:42:58.281606Z","shell.execute_reply.started":"2024-04-10T12:42:57.985587Z","shell.execute_reply":"2024-04-10T12:42:58.280262Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"1"},"metadata":{}}]},{"cell_type":"code","source":"num_tables = len(list(client.list_tables(dataset)))# Store the answer as num_tables and then run this cell\n\n# Check your answer\nq_1.check()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:43:26.426297Z","iopub.execute_input":"2024-04-10T12:43:26.426660Z","iopub.status.idle":"2024-04-10T12:43:26.753301Z","shell.execute_reply.started":"2024-04-10T12:43:26.426631Z","shell.execute_reply":"2024-04-10T12:43:26.752246Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_CountTables\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_1.hint()\n#q_1.solution()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2) Explore the table schema\n\nHow many columns in the `crime` table have `TIMESTAMP` data?","metadata":{}},{"cell_type":"code","source":"# Write the code to figure out the answer\ntable_ref = dataset.table('crime')\ntable = client.get_table(table_ref)\ntable.schema","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:45:03.489460Z","iopub.execute_input":"2024-04-10T12:45:03.491314Z","iopub.status.idle":"2024-04-10T12:45:04.145915Z","shell.execute_reply.started":"2024-04-10T12:45:03.491221Z","shell.execute_reply":"2024-04-10T12:45:04.144995Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"[SchemaField('unique_key', 'INTEGER', 'REQUIRED', None, (), None),\n SchemaField('case_number', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('date', 'TIMESTAMP', 'NULLABLE', None, (), None),\n SchemaField('block', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('iucr', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('primary_type', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('description', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('location_description', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('arrest', 'BOOLEAN', 'NULLABLE', None, (), None),\n SchemaField('domestic', 'BOOLEAN', 'NULLABLE', None, (), None),\n SchemaField('beat', 'INTEGER', 'NULLABLE', None, (), None),\n SchemaField('district', 'INTEGER', 'NULLABLE', None, (), None),\n SchemaField('ward', 'INTEGER', 'NULLABLE', None, (), None),\n SchemaField('community_area', 'INTEGER', 'NULLABLE', None, (), None),\n SchemaField('fbi_code', 'STRING', 'NULLABLE', None, (), None),\n SchemaField('x_coordinate', 'FLOAT', 'NULLABLE', None, (), None),\n SchemaField('y_coordinate', 'FLOAT', 'NULLABLE', None, (), None),\n SchemaField('year', 'INTEGER', 'NULLABLE', None, (), None),\n SchemaField('updated_on', 'TIMESTAMP', 'NULLABLE', None, (), None),\n SchemaField('latitude', 'FLOAT', 'NULLABLE', None, (), None),\n SchemaField('longitude', 'FLOAT', 'NULLABLE', None, (), None),\n SchemaField('location', 'STRING', 'NULLABLE', None, (), None)]"},"metadata":{}}]},{"cell_type":"code","source":"table_schema = table.schema","metadata":{"execution":{"iopub.status.busy":"2024-04-10T12:46:58.964554Z","iopub.execute_input":"2024-04-10T12:46:58.965357Z","iopub.status.idle":"2024-04-10T12:46:58.970524Z","shell.execute_reply.started":"2024-04-10T12:46:58.965319Z","shell.execute_reply":"2024-04-10T12:46:58.969235Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def count_type_occurrences(schema_list, field_type):\n    count = 0\n    for schema in schema_list:\n        if schema.field_type == field_type:\n            count += 1\n    return count","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:02:17.840442Z","iopub.execute_input":"2024-04-10T13:02:17.840827Z","iopub.status.idle":"2024-04-10T13:02:17.846909Z","shell.execute_reply.started":"2024-04-10T13:02:17.840798Z","shell.execute_reply":"2024-04-10T13:02:17.845574Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"print(count_type_occurrences(table_schema, 'TIMESTAMP'))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:03:20.447564Z","iopub.execute_input":"2024-04-10T13:03:20.447957Z","iopub.status.idle":"2024-04-10T13:03:20.453699Z","shell.execute_reply.started":"2024-04-10T13:03:20.447927Z","shell.execute_reply":"2024-04-10T13:03:20.452505Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"2\n","output_type":"stream"}]},{"cell_type":"code","source":"num_timestamp_fields = count_type_occurrences(table_schema, 'TIMESTAMP') # Put your answer here\n\n# Check your answer\nq_2.check()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:04:55.989318Z","iopub.execute_input":"2024-04-10T13:04:55.989730Z","iopub.status.idle":"2024-04-10T13:04:55.999251Z","shell.execute_reply.started":"2024-04-10T13:04:55.989696Z","shell.execute_reply":"2024-04-10T13:04:55.998100Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_CountTimestampFields\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_2.hint()\n#q_2.solution()","metadata":{"execution":{"iopub.status.busy":"2021-12-07T22:11:59.265123Z","iopub.execute_input":"2021-12-07T22:11:59.265931Z","iopub.status.idle":"2021-12-07T22:11:59.269161Z","shell.execute_reply.started":"2021-12-07T22:11:59.265889Z","shell.execute_reply":"2021-12-07T22:11:59.268514Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 3) Create a crime map\n\nIf you wanted to create a map with a dot at the location of each crime, what are the names of the two fields you likely need to pull out of the `crime` table to plot the crimes on a map?","metadata":{}},{"cell_type":"code","source":"# Write the code here to explore the data so you can find the answer\nclient.list_rows(table, max_results=5).to_dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:05:01.886513Z","iopub.execute_input":"2024-04-10T13:05:01.886879Z","iopub.status.idle":"2024-04-10T13:05:02.717635Z","shell.execute_reply.started":"2024-04-10T13:05:01.886851Z","shell.execute_reply":"2024-04-10T13:05:02.716742Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   unique_key case_number                      date               block  iucr  \\\n0    11511120    JB521056 2018-11-18 07:55:00+00:00     0000X E LAKE ST  0281   \n1    11919725    JC544322 2019-12-09 01:00:00+00:00   0000X E WACKER DR  0281   \n2     9494717    HX148928 2013-12-19 06:00:00+00:00  001XX N WABASH AVE  0281   \n3    12189203    JD394481 2020-10-09 07:00:00+00:00   0000X E WACKER PL  0281   \n4    10463305    HZ202664 2016-03-27 03:30:00+00:00    002XX N STATE ST  0312   \n\n              primary_type                     description  \\\n0      CRIM SEXUAL ASSAULT                  NON-AGGRAVATED   \n1      CRIM SEXUAL ASSAULT                  NON-AGGRAVATED   \n2      CRIM SEXUAL ASSAULT                  NON-AGGRAVATED   \n3  CRIMINAL SEXUAL ASSAULT                  NON-AGGRAVATED   \n4                  ROBBERY  ARMED:KNIFE/CUTTING INSTRUMENT   \n\n        location_description  arrest  domestic  ...  ward  community_area  \\\n0                     STREET   False     False  ...    42              32   \n1                HOTEL/MOTEL   False     False  ...    42              32   \n2  SCHOOL, PRIVATE, BUILDING   False     False  ...    42              32   \n3              HOTEL / MOTEL   False     False  ...    42              32   \n4                     STREET   False     False  ...    42              32   \n\n   fbi_code  x_coordinate y_coordinate  year                updated_on  \\\n0        02     1176916.0    1901744.0  2018 2018-11-25 04:09:36+00:00   \n1        02     1176971.0    1902537.0  2019 2019-12-16 03:40:25+00:00   \n2        02     1176785.0    1901619.0  2013 2018-02-10 03:50:01+00:00   \n3        02     1176964.0    1902140.0  2020 2020-10-16 03:42:28+00:00   \n4        03     1176327.0    1901797.0  2016 2016-04-03 03:49:03+00:00   \n\n    latitude  longitude                       location  \n0  41.885729 -87.625781  (41.885729338, -87.625780935)  \n1  41.887904 -87.625555  (41.887904127, -87.625554948)  \n2  41.885389 -87.626266  (41.885389294, -87.626265771)  \n3  41.886815 -87.625593  (41.886814897, -87.625592678)  \n4  41.885888 -87.627942  (41.885888079, -87.627942238)  \n\n[5 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_key</th>\n      <th>case_number</th>\n      <th>date</th>\n      <th>block</th>\n      <th>iucr</th>\n      <th>primary_type</th>\n      <th>description</th>\n      <th>location_description</th>\n      <th>arrest</th>\n      <th>domestic</th>\n      <th>...</th>\n      <th>ward</th>\n      <th>community_area</th>\n      <th>fbi_code</th>\n      <th>x_coordinate</th>\n      <th>y_coordinate</th>\n      <th>year</th>\n      <th>updated_on</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11511120</td>\n      <td>JB521056</td>\n      <td>2018-11-18 07:55:00+00:00</td>\n      <td>0000X E LAKE ST</td>\n      <td>0281</td>\n      <td>CRIM SEXUAL ASSAULT</td>\n      <td>NON-AGGRAVATED</td>\n      <td>STREET</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>42</td>\n      <td>32</td>\n      <td>02</td>\n      <td>1176916.0</td>\n      <td>1901744.0</td>\n      <td>2018</td>\n      <td>2018-11-25 04:09:36+00:00</td>\n      <td>41.885729</td>\n      <td>-87.625781</td>\n      <td>(41.885729338, -87.625780935)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11919725</td>\n      <td>JC544322</td>\n      <td>2019-12-09 01:00:00+00:00</td>\n      <td>0000X E WACKER DR</td>\n      <td>0281</td>\n      <td>CRIM SEXUAL ASSAULT</td>\n      <td>NON-AGGRAVATED</td>\n      <td>HOTEL/MOTEL</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>42</td>\n      <td>32</td>\n      <td>02</td>\n      <td>1176971.0</td>\n      <td>1902537.0</td>\n      <td>2019</td>\n      <td>2019-12-16 03:40:25+00:00</td>\n      <td>41.887904</td>\n      <td>-87.625555</td>\n      <td>(41.887904127, -87.625554948)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9494717</td>\n      <td>HX148928</td>\n      <td>2013-12-19 06:00:00+00:00</td>\n      <td>001XX N WABASH AVE</td>\n      <td>0281</td>\n      <td>CRIM SEXUAL ASSAULT</td>\n      <td>NON-AGGRAVATED</td>\n      <td>SCHOOL, PRIVATE, BUILDING</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>42</td>\n      <td>32</td>\n      <td>02</td>\n      <td>1176785.0</td>\n      <td>1901619.0</td>\n      <td>2013</td>\n      <td>2018-02-10 03:50:01+00:00</td>\n      <td>41.885389</td>\n      <td>-87.626266</td>\n      <td>(41.885389294, -87.626265771)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12189203</td>\n      <td>JD394481</td>\n      <td>2020-10-09 07:00:00+00:00</td>\n      <td>0000X E WACKER PL</td>\n      <td>0281</td>\n      <td>CRIMINAL SEXUAL ASSAULT</td>\n      <td>NON-AGGRAVATED</td>\n      <td>HOTEL / MOTEL</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>42</td>\n      <td>32</td>\n      <td>02</td>\n      <td>1176964.0</td>\n      <td>1902140.0</td>\n      <td>2020</td>\n      <td>2020-10-16 03:42:28+00:00</td>\n      <td>41.886815</td>\n      <td>-87.625593</td>\n      <td>(41.886814897, -87.625592678)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10463305</td>\n      <td>HZ202664</td>\n      <td>2016-03-27 03:30:00+00:00</td>\n      <td>002XX N STATE ST</td>\n      <td>0312</td>\n      <td>ROBBERY</td>\n      <td>ARMED:KNIFE/CUTTING INSTRUMENT</td>\n      <td>STREET</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>42</td>\n      <td>32</td>\n      <td>03</td>\n      <td>1176327.0</td>\n      <td>1901797.0</td>\n      <td>2016</td>\n      <td>2016-04-03 03:49:03+00:00</td>\n      <td>41.885888</td>\n      <td>-87.627942</td>\n      <td>(41.885888079, -87.627942238)</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"fields_for_plotting = ['latitude', 'longitude'] # Put your answers here\n\n# Check your answer\nq_3.check()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:05:38.905997Z","iopub.execute_input":"2024-04-10T13:05:38.906389Z","iopub.status.idle":"2024-04-10T13:05:38.916691Z","shell.execute_reply.started":"2024-04-10T13:05:38.906360Z","shell.execute_reply":"2024-04-10T13:05:38.915413Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_IdentifyFieldsForPlotting\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_3.hint()\n#q_3.solution()","metadata":{"execution":{"iopub.status.busy":"2021-12-07T22:16:29.414653Z","iopub.execute_input":"2021-12-07T22:16:29.414941Z","iopub.status.idle":"2021-12-07T22:16:29.419050Z","shell.execute_reply.started":"2021-12-07T22:16:29.414908Z","shell.execute_reply":"2021-12-07T22:16:29.417992Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Thinking about the question above, there are a few columns that appear to have geographic data. Look at a few values (with the `list_rows()` command) to see if you can determine their relationship.  Two columns will still be hard to interpret. But it should be obvious how the `location` column relates to `latitude` and `longitude`.","metadata":{}},{"cell_type":"code","source":"df_table = client.list_rows(table, max_results=100).to_dataframe()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:11:39.963711Z","iopub.execute_input":"2024-04-10T13:11:39.964147Z","iopub.status.idle":"2024-04-10T13:11:40.395129Z","shell.execute_reply.started":"2024-04-10T13:11:39.964115Z","shell.execute_reply":"2024-04-10T13:11:40.394110Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"df_table.columns\ncolumns_with_location = ['x_coordinate',\n       'y_coordinate', 'latitude', 'longitude',\n       'location']","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:13:14.411259Z","iopub.execute_input":"2024-04-10T13:13:14.411646Z","iopub.status.idle":"2024-04-10T13:13:14.417105Z","shell.execute_reply.started":"2024-04-10T13:13:14.411616Z","shell.execute_reply":"2024-04-10T13:13:14.416206Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"df_table[columns_with_location]","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:14:07.683735Z","iopub.execute_input":"2024-04-10T13:14:07.684133Z","iopub.status.idle":"2024-04-10T13:14:07.702485Z","shell.execute_reply.started":"2024-04-10T13:14:07.684104Z","shell.execute_reply":"2024-04-10T13:14:07.701265Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"    x_coordinate  y_coordinate   latitude  longitude  \\\n0      1176916.0     1901744.0  41.885729 -87.625781   \n1      1176971.0     1902537.0  41.887904 -87.625555   \n2      1176785.0     1901619.0  41.885389 -87.626266   \n3      1176964.0     1902140.0  41.886815 -87.625593   \n4      1176327.0     1901797.0  41.885888 -87.627942   \n..           ...           ...        ...        ...   \n95     1173084.0     1898910.0  41.878039 -87.639937   \n96     1172840.0     1899791.0  41.880461 -87.640807   \n97     1174271.0     1902189.0  41.887010 -87.635481   \n98     1173923.0     1898724.0  41.877509 -87.636862   \n99     1176785.0     1901611.0  41.885367 -87.626266   \n\n                         location  \n0   (41.885729338, -87.625780935)  \n1   (41.887904127, -87.625554948)  \n2   (41.885389294, -87.626265771)  \n3   (41.886814897, -87.625592678)  \n4   (41.885888079, -87.627942238)  \n..                            ...  \n95  (41.878038501, -87.639936767)  \n96  (41.880461428, -87.640806568)  \n97  (41.887009878, -87.635480523)  \n98  (41.877509463, -87.636861729)  \n99  (41.885367342, -87.626266013)  \n\n[100 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x_coordinate</th>\n      <th>y_coordinate</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1176916.0</td>\n      <td>1901744.0</td>\n      <td>41.885729</td>\n      <td>-87.625781</td>\n      <td>(41.885729338, -87.625780935)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1176971.0</td>\n      <td>1902537.0</td>\n      <td>41.887904</td>\n      <td>-87.625555</td>\n      <td>(41.887904127, -87.625554948)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1176785.0</td>\n      <td>1901619.0</td>\n      <td>41.885389</td>\n      <td>-87.626266</td>\n      <td>(41.885389294, -87.626265771)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1176964.0</td>\n      <td>1902140.0</td>\n      <td>41.886815</td>\n      <td>-87.625593</td>\n      <td>(41.886814897, -87.625592678)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1176327.0</td>\n      <td>1901797.0</td>\n      <td>41.885888</td>\n      <td>-87.627942</td>\n      <td>(41.885888079, -87.627942238)</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>1173084.0</td>\n      <td>1898910.0</td>\n      <td>41.878039</td>\n      <td>-87.639937</td>\n      <td>(41.878038501, -87.639936767)</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>1172840.0</td>\n      <td>1899791.0</td>\n      <td>41.880461</td>\n      <td>-87.640807</td>\n      <td>(41.880461428, -87.640806568)</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>1174271.0</td>\n      <td>1902189.0</td>\n      <td>41.887010</td>\n      <td>-87.635481</td>\n      <td>(41.887009878, -87.635480523)</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>1173923.0</td>\n      <td>1898724.0</td>\n      <td>41.877509</td>\n      <td>-87.636862</td>\n      <td>(41.877509463, -87.636861729)</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>1176785.0</td>\n      <td>1901611.0</td>\n      <td>41.885367</td>\n      <td>-87.626266</td>\n      <td>(41.885367342, -87.626266013)</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:18:17.005478Z","iopub.execute_input":"2024-04-10T13:18:17.005907Z","iopub.status.idle":"2024-04-10T13:18:19.407394Z","shell.execute_reply.started":"2024-04-10T13:18:17.005874Z","shell.execute_reply":"2024-04-10T13:18:19.406206Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"sns.regplot(x=df_table['latitude']+df_table['longitude'],y=df_table['x_coordinate']+df_table['y_coordinate'])","metadata":{"execution":{"iopub.status.busy":"2024-04-10T13:24:18.270524Z","iopub.execute_input":"2024-04-10T13:24:18.270915Z","iopub.status.idle":"2024-04-10T13:24:18.694640Z","shell.execute_reply.started":"2024-04-10T13:24:18.270875Z","shell.execute_reply":"2024-04-10T13:24:18.693514Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"'x' and 'y' coordinates just another representation of geographical coordinates on a plane. \nThat is why sum 'x+y' linery depends from 'lat + long'","metadata":{}},{"cell_type":"markdown","source":"# Keep going\n\nYou've looked at the schema, but you haven't yet done anything exciting with the data itself. Things get more interesting when you get to the data, so keep going to **[write your first SQL query](https://www.kaggle.com/dansbecker/select-from-where).**","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*","metadata":{}}]}